// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(uuid())
  email             String             @unique
  login             String?            @unique
  passwordHash      String             @map("pass_hash")
  photo             String?
  firstName         String?
  lastName          String?
  birthdayDate      DateTime?
  city              String?
  aboutMe           String?
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @default(now()) @updatedAt @map("updated_at")
  refreshToken      String             @default("empty")
  usersConfirmEmail UsersConfirmEmail?
  passwordRecovery  PasswordRecovery?
  posts             Post[]
  role              Role              @default(USER)
  isUserBlocked     Boolean            @default(false)

  @@map("user")
}

enum Role {
  USER
  ADMIN
}

model UsersConfirmEmail {
  id             String   @id @default(uuid())
  isConfirmed    Boolean  @default(false) @map("is_confirmed")
  confirmCode    String   @unique @map("confirm_code")
  expirationDate DateTime @map("expr_date")
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String   @unique @map("user_id")

  @@map("users_confirm_email")
}

model PasswordRecovery {
  id             String   @id @default(uuid())
  isConfirmed    Boolean  @default(false) @map("is_confirmed")
  recoveryCode   String   @unique @map("recovery_code")
  expirationDate DateTime @map("expr_date")
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String   @unique @map("user_id")

  @@map("users_password_recovery")
}

model Post {
  id             String     @id @default(uuid())
  description    String
  likes          Int?       @default(0)
  share          String[]
  image          String[]
  author         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String     @map("user_id")
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @default(now()) @updatedAt @map("updated_at")

  @@map("users_post")
}
